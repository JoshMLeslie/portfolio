{"version":3,"sources":["src/app/shared/project-tile/project-tile.module.ts","src/app/split-screen/web/projects/projects.module.ts","src/app/split-screen/web/projects/projects.routing.ts","src/app/split-screen/web/projects/song-to-piano/note-generator.service.ts","src/app/split-screen/web/projects/song-to-piano/piano-keys.config.ts","src/app/split-screen/web/projects/song-to-piano/song-to-piano.module.ts","src/app/split-screen/web/projects/song-to-piano/song-to-piano.service.ts","src/app/split-screen/web/projects/xr/xr.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from 'app/shared/utilities/core.module';\nimport { ProjectTileComponent } from './project-tile.component';\n\n@NgModule({\n\tdeclarations: [ProjectTileComponent],\n\timports: [\n\t\tCommonModule\n\t\t, CoreModule\n\t],\n\tproviders: [],\n\texports: [ProjectTileComponent]\n})\nexport class ProjecTileModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from 'app/shared/utilities/core.module';\nimport { SongToPianoModule } from './song-to-piano/song-to-piano.module';\nimport { WebProjectsComponent } from './projects.component';\nimport { XRModule } from './xr/xr.module';\nimport { ProjecTileModule } from 'app/shared/project-tile/project-tile.module';\nimport { WebProjectsRoutingModule } from './projects.routing';\n\n@NgModule({\n\tdeclarations: [WebProjectsComponent],\n\timports: [\n\t\tCommonModule\n\t\t, WebProjectsRoutingModule\n\t\t, CoreModule\n\t\t, ProjecTileModule\n\t\t, SongToPianoModule\n\t\t, XRModule\n\t],\n\texports: [WebProjectsComponent]\n})\nexport class WebProjectsModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WebProjectsComponent } from './projects.component';\n\nconst routes: Routes = [\n\t// {\n\t// \tpath: '', component: WebProjectsComponent\n\t// }\n];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule]\n})\nexport class WebProjectsRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, timer } from 'rxjs';\nimport { distinctUntilChanged, scan, take } from 'rxjs/operators';\nimport { PIANO_KEYS } from './piano-keys.config';\n\nconst LOGGER = (v: any) => console.log(v);\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NoteGeneratorService {\n\t/* Work largely done by Chris Wilson (c) 2014 used under The MIT License (MIT) -- https://github.com/cwilso/PitchDetect */\n\n\tprivate _noteList = new BehaviorSubject<string>(''); // tslint:disable-line:variable-name\n\tpublic noteList$ = this._noteList.asObservable().pipe(\n\t\tdistinctUntilChanged()\n\t\t, scan((acc, val) => acc += val + ' ')\n\t); // could also collect it in the BeahaviorSubject, but this way there's less visible code for tracking changes?\n\n\tisPlaying = false;\n\n\tbuflen = 256;\n\tbuf = new Float32Array(this.buflen);\n\tMIN_SAMPLES = 0;\n\tGOOD_ENOUGH_CORRELATION = 0.95; // this is the \"bar\" for how close a correlation needs to be\n\tresolution: 100; // miliseconds between reads / updates\n\tMAX_SIZE: number;\n\taudioContext: AudioContext = new AudioContext();\n\tanalyser: AnalyserNode;\n\tmediaStreamSource: MediaStreamAudioSourceNode;\n\n\tconstructor() {\n\t\tthis.MAX_SIZE = Math.max(4, Math.floor(this.audioContext.sampleRate / 5000)); \t// corresponds to a 5kHz signal\n\t}\n\n\tpublic toggleLiveInput() {\n\t\tif (this.isPlaying) {\n\t\t\tthis.stopPlaying();\n\t\t\treturn;\n\t\t}\n\n\t\tconst audioOptions = { audio: { advanced: [\n\t\t\t{ echoCancellation: false },\n\t\t\t{ autoGainControl: false },\n\t\t\t{ noiseSuppression: false },\n\t\t]}};\n\n\t\tnavigator.mediaDevices.getUserMedia(audioOptions).then(stream => {\n\t\t\t// Create an AudioNode from the stream.\n\t\t\tthis.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n\t\t\t// Connect it to the destination.\n\t\t\tthis.analyser = this.audioContext.createAnalyser();\n\t\t\tthis.analyser.fftSize = 512;\n\t\t\tthis.mediaStreamSource.connect(this.analyser);\n\t\t\tthis.updatePitch();\n\n\t\t\tthis.startPlaying();\n\t\t})\n\t\t.catch(e => {\n\t\t\talert(e);\n\t\t\tthis.stopPlaying();\n\t\t});\n\t}\n\n\tprivate stopPlaying() {\n\t\tthis.isPlaying = false;\n\t\tthis.audioContext.suspend().then(LOGGER, LOGGER).catch(LOGGER);\n\t}\n\tprivate startPlaying() {\n\t\tthis.isPlaying = true;\n\t\tthis.audioContext.resume().then(LOGGER, LOGGER).catch(LOGGER);\n\t}\n\n\tprivate autoCorrelate() {\n\t\tconst sampleRate = this.audioContext.sampleRate;\n\t\tconst SIZE = this.buflen;\n\t\tconst MAX_SAMPLES = Math.floor(this.buflen / 2);\n\t\tconst correlations = {};\n\t\tlet bestOffset = -1;\n\t\tlet bestCorrelation = 0;\n\t\tlet rms = 0;\n\t\tlet foundGoodCorrelation = false;\n\t\tlet lastCorrelation = 1;\n\n\t\tfor (let i = 0; i < SIZE; i++) {\n\t\t\tconst val = this.buf[i];\n\t\t\trms += val * val;\n\t\t}\n\n\t\trms = Math.sqrt(rms / SIZE);\n\n\t\t// not enough signal\n\t\tif (rms < 0.01) { return -1; }\n\n\t\tfor (let offset = this.MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {\n\t\t\tlet correlation = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; i++) {\n\t\t\t\tcorrelation += Math.abs((this.buf[i]) - (this.buf[i + offset]));\n\t\t\t}\n\n\t\t\tcorrelations[offset] = 1 - (correlation / MAX_SAMPLES); // store it, for the tweaking we need to do below.\n\n\t\t\tif ((correlation > this.GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\n\t\t\t\tfoundGoodCorrelation = true;\n\t\t\t\tif (correlation > bestCorrelation) {\n\t\t\t\t\tbestCorrelation = correlation;\n\t\t\t\t\tbestOffset = offset;\n\t\t\t\t}\n\t\t\t} else if (foundGoodCorrelation) {\n\t\t\t\t/**\n\t\t\t\t * short-circuit - A good correlation was found, then a bad one.\n\t\t\t\t * Without this catch, you'd see duplicates.\n\t\t\t\t *\n\t\t\t\t * Now we need to tweak the offset - by interpolating between the values to the left and right of the\n\t\t\t\t * best offset, and shifting it.\n\t\t\t\t *\n\t\t\t\t * This is complex, and HACKY in this code (happy to take PRs!) -\n\t\t\t\t * we need to do a curve fit on correlations around best_offset in order to better determine precise\n\t\t\t\t * (anti-aliased) offset.\n\t\t\t\t *\n\t\t\t\t * best_offset >=1\n\t\t\t\t * and since foundGoodCorrelation cannot go to true until the second pass (offset=1)\n\t\t\t\t * and we can't drop into this clause until the following pass (else if).\n\t\t\t\t */\n\t\t\t\tconst shift = (correlations[bestOffset + 1] - correlations[bestOffset - 1]) / correlations[bestOffset];\n\t\t\t\treturn sampleRate / (bestOffset + (8 * shift));\n\t\t\t}\n\t\t\tlastCorrelation = correlation;\n\t\t}\n\n\t\treturn bestCorrelation > 0.01 ? sampleRate / bestOffset : -1;\n\t}\n\n\tprivate updatePitch() {\n\t\tthis.analyser.getFloatTimeDomainData(this.buf);\n\t\tconst pitch = this.autoCorrelate();\n\n\t\tif (pitch !== -1) {\n\t\t\tthis.printNote(pitch);\n\t\t}\n\t\ttimer(this.resolution).pipe(take(1)).subscribe(() => this.updatePitch());\n\t}\n\n\tprivate printNote(pitch: number) {\n\t\tconst pianoKey = Math.floor(12 * Math.log2(pitch / 440) + 49);\n\t\tconst noteEl = PIANO_KEYS[pianoKey];\n\n\t\tthis._noteList.next(noteEl);\n\t}\n}\n","export const PIANO_KEYS = {\n\t88: 'C8',\n\t87:\t'B7 \t',\n\t86:\t'A♯7/B♭7',\n\t85:\t'A7',\n\t84:\t'G♯7/A♭7',\n\t83:\t'G7',\n\t82:\t'F♯7/G♭7',\n\t81:\t'F7',\n\t80:\t'E7',\n\t79:\t'D♯7/E♭7',\n\t78:\t'D7',\n\t77:\t'C♯7/D♭7',\n\t76:\t'C7',\n\t75:\t'B6',\n\t74:\t'A♯6/B♭6',\n\t73:\t'A6',\n\t72:\t'G♯6/A♭6',\n\t71:\t'G6',\n\t70:\t'F♯6/G♭6',\n\t69:\t'F6',\n\t68:\t'E6',\n\t67:\t'D♯6/E♭6',\n\t66:\t'D6',\n\t65:\t'C♯6/D♭6',\n\t64:\t'C6',\n\t63:\t'B5',\n\t62:\t'A♯5/B♭5',\n\t61:\t'A5',\n\t60:\t'G♯5/A♭5',\n\t59:\t'G5',\n\t58:\t'F♯5/G♭5',\n\t57:\t'F5',\n\t56:\t'E5',\n\t55:\t'D♯5/E♭5',\n\t54:\t'D5',\n\t53:\t'C♯5/D♭5',\n\t52:\t'C5',\n\t51:\t'B4',\n\t50:\t'A♯4/B♭4',\n\t49:\t'A4', // A440 -- middle\n\t48:\t'G♯4/A♭4',\n\t47:\t'G4',\n\t46:\t'F♯4/G♭4',\n\t45:\t'F4',\n\t44:\t'E4',\n\t43:\t'D♯4/E♭4',\n\t42:\t'D4',\n\t41:\t'C♯4/D♭4',\n\t40:\t'C4',\n\t39:\t'B3',\n\t38:\t'A♯3/B♭3',\n\t37:\t'A3',\n\t36:\t'G♯3/A♭3',\n\t35:\t'G3',\n\t34:\t'F♯3/G♭3',\n\t33:\t'F3',\n\t32:\t'E3',\n\t31:\t'D♯3/E♭3',\n\t30:\t'D3',\n\t29:\t'C♯3/D♭3',\n\t28:\t'C3',\n\t27:\t'B2',\n\t26:\t'A♯2/B♭2',\n\t25:\t'A2',\n\t24:\t'G♯2/A♭2',\n\t23:\t'G2',\n\t22:\t'F♯2/G♭2',\n\t21:\t'F2',\n\t20:\t'E2',\n\t19:\t'D♯2/E♭2',\n\t18:\t'D2',\n\t17:\t'C♯2/D♭2',\n\t16:\t'C2',\n\t15:\t'B1',\n\t14:\t'A♯1/B♭1',\n\t12:\t'G♯1/A♭1',\n\t11:\t'G1',\n\t9:\t'F1',\n\t7:\t'D♯1/E♭1',\n\t5:\t'C♯1/D♭1',\n\t4:\t'C1',\n\t3:\t'B0',\n\t2:\t'A♯0/B♭0',\n\t1:  'A0;'\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SongToPianoComponent } from './component/song-to-piano.component';\nimport { SongToPianoService } from './song-to-piano.service';\nimport { NoteGeneratorService } from './note-generator.service';\nimport { CoreModule } from 'app/shared/utilities/core.module';\n\n@NgModule({\n\tdeclarations: [SongToPianoComponent],\n\tproviders: [\n\t\tSongToPianoService\n\t\t, NoteGeneratorService\n\t],\n\timports: [\n\t\tCommonModule\n\t\t, CoreModule\n\t],\n\texports: [SongToPianoComponent]\n})\nexport class SongToPianoModule { }\n","import { Injectable } from '@angular/core';\nimport { WindowService } from '../../../../shared/utilities/window.service';\n\n/** Source: https://stackoverflow.com/a/27852403 */\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class SongToPianoService {\n\n\tpublic gainNode = null;\n\n\tprivate audioContext = new AudioContext();\n\tprivate BUFF_SIZE = 16384;\n\tprivate microphoneStream = null;\n\tprivate scriptProcessorNode = null;\n\tprivate scriptProcessorFFTNode = null;\n\tprivate analyserNode = null;\n\tprivate navigator: Navigator;\n\n\tconstructor(window: WindowService) {\n\t\tthis.navigator = window.navigator;\n\n\t}\n\n\twebaudioToolingObj() {\n\t\tconsole.log('audio is starting up ...');\n\n\t\tconst getUserMedia = this.navigator.mediaDevices.getUserMedia;\n\n\t\tif (getUserMedia) {\n\t\t\tconst opts: MediaStreamConstraints = {audio: true};\n\t\t\tthis.navigator.mediaDevices.getUserMedia(opts)\n\t\t\t\t.then((stream) => {\n\t\t\t\t\tconsole.log(stream);\n\t\t\t\t\tthis.startMicrophone(stream);\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\talert('Error capturing audio.');\n\t\t\t\t});\n\t\t} else {\n\t\t\talert('getUserMedia not supported in this browser.');\n\t\t}\n\t}\n\n\tstartMicrophone(stream) {\n\t\tthis.gainNode = this.audioContext.createGain();\n\t\tthis.gainNode.connect(this.audioContext.destination);\n\n\t\tthis.microphoneStream = this.audioContext.createMediaStreamSource(stream);\n\t\tthis.microphoneStream.connect(this.gainNode);\n\n\t\tthis.scriptProcessorNode = this.audioContext.createScriptProcessor(this.BUFF_SIZE, 1, 1);\n\n\t\tthis.microphoneStream.connect(this.scriptProcessorNode);\n\n\t\t// --- setup FFT\n\t\tthis.scriptProcessorFFTNode = this.audioContext.createScriptProcessor(2048, 1, 1);\n\t\tthis.scriptProcessorFFTNode.connect(this.gainNode);\n\n\t\tthis.analyserNode = this.audioContext.createAnalyser();\n\t\tthis.analyserNode.smoothingTimeConstant = 0;\n\t\tthis.analyserNode.fftSize = 2048;\n\n\t\tthis.microphoneStream.connect(this.analyserNode);\n\n\t\tthis.analyserNode.connect(this.scriptProcessorFFTNode);\n\n\t\tthis.scriptProcessorFFTNode.onaudioprocess = () => {\n\t\t\t// get the average for the first channel\n\t\t\tconst arr = new Uint8Array(this.analyserNode.frequencyBinCount);\n\t\t\tthis.analyserNode.getByteFrequencyData(arr);\n\t\t};\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { XrComponent } from './xr.component';\nimport { CoreModule } from 'app/shared/utilities/core.module';\n\n@NgModule({\n\tdeclarations: [XrComponent],\n\timports: [\n\t\tCommonModule\n\t\t, CoreModule\n\t],\n\texports: [XrComponent]\n})\nexport class XRModule { }\n"],"sourceRoot":"webpack:///","file":"projects-projects-module-ngfactory-es5.js"}